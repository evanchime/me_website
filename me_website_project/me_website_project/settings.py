"""
Django settings for me_website_project project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from environment or .env file if it exists
env = environ.Env()
env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('ME_WEBSITE_DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# Fetch ALLOWED_HOSTS environment variable value and parse as a list.
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# Application definition
INSTALLED_APPS = [
    'storages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'about',
    'projects',
    'skills',
    'experience',
    'education',
    'contact',
    'features',
    'core',
    'widget_tweaks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'me_website_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'me_website_project.wsgi.application'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# This setting is needed by BOTH `runserver` in development AND 
# `collectstatic` in production. It tells Django where to find your 
# project-level static files (CSS, JS, etc.).
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# The directory where `collectstatic` will place files.
# Django requires this to be set, even when uploading directly to S3.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Absolute path to the folder where user-uploaded files will be stored 
# locally.
MEDIA_ROOT = BASE_DIR / 'media'

if DEBUG:
    # --- DEVELOPMENT-SPECIFIC SETTINGS ---

    # Use a simple SQLite database for local development.
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / "db.sqlite3",
        }
    }

    # URL prefix for static files served by the development server.
    STATIC_URL = '/static/'

    # URL prefix for user-uploaded media files served by the development 
    # server.
    MEDIA_URL = '/media/'

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    CSRF_COOKIE_HTTPONLY = False

else:
    # --- PRODUCTION-SPECIFIC SETTINGS ---

    # Use PostgreSQL from a DATABASE_URL.
    DATABASES = {
        # The env.db() call will raise an error if DATABASE_URL is not 
        # set in production, which is good practice to prevent 
        # accidentally running with a wrong config.
        'default': env.db('DATABASE_URL')
    }

    # Add optional SSL settings for production if not in DATABASE_URL
    DATABASES['default']['OPTIONS'] = {
        'sslmode': 'require',
    }

    # Configure S3 variables (read by django-storages)
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME')
    AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN')
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=31536000'}
    AWS_DEFAULT_ACL = None

    # Override URLs to point to the CDN/S3 in production
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

    # Configure the actual storage backends for production
    S3_BACKEND = "storages.backends.s3boto3.S3Boto3Storage"
    STORAGES = {
        "default": {
            "BACKEND": S3_BACKEND,
            "OPTIONS": {"location": "media"},
        },
        "staticfiles": {
            "BACKEND": S3_BACKEND,
            "OPTIONS": {"location": "static"},
        },
    }

    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    CSRF_COOKIE_HTTPONLY = True 

# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "home" # Redirect to home page after login

LOGOUT_REDIRECT_URL = "home" # Redirect to home page after logout

# Configure email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env.str('EMAIL_HOST_USER')
# You might need an Google app password for security
EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD')

# Optional but recommended
APP_VERSION = env.str("APP_VERSION", "1.0.0")

# Read CSRF_TRUSTED_ORIGINS from the environment; if not set, fall back 
# to a default list.
CSRF_TRUSTED_ORIGINS = env.list(
    "CSRF_TRUSTED_ORIGINS",
    default=["http://localhost:8080", "http://127.0.0.1:8080"]
)

# Tell Django to trust the X-Forwarded-Proto header
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Use X-Forwarded-Host and X-Forwarded-Port headers to get the original 
# host and port
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Make sure you have ADMINS configured for mail_admins to work
ADMIN_NAME = env.str('ADMIN_NAME', default='Default Admin')
ADMIN_EMAIL = env.str('ADMIN_EMAIL', default='default@example.com')

# Configure ADMINS only if an email is provided
ADMINS = []
if ADMIN_EMAIL and ADMIN_EMAIL != 'default@example.com':
    ADMINS = [(ADMIN_NAME, ADMIN_EMAIL)]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins', 'console'], # Use one or both
            'level': 'ERROR', # Only log ERROR level messages and higher
            'propagate': True,
        },
    },
}




